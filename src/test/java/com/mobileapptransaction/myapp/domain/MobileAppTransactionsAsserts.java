package com.mobileapptransaction.myapp.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class MobileAppTransactionsAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMobileAppTransactionsAllPropertiesEquals(MobileAppTransactions expected, MobileAppTransactions actual) {
        assertMobileAppTransactionsAutoGeneratedPropertiesEquals(expected, actual);
        assertMobileAppTransactionsAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMobileAppTransactionsAllUpdatablePropertiesEquals(
        MobileAppTransactions expected,
        MobileAppTransactions actual
    ) {
        assertMobileAppTransactionsUpdatableFieldsEquals(expected, actual);
        assertMobileAppTransactionsUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMobileAppTransactionsAutoGeneratedPropertiesEquals(
        MobileAppTransactions expected,
        MobileAppTransactions actual
    ) {
        assertThat(actual)
            .as("Verify MobileAppTransactions auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMobileAppTransactionsUpdatableFieldsEquals(MobileAppTransactions expected, MobileAppTransactions actual) {
        assertThat(actual)
            .as("Verify MobileAppTransactions relevant properties")
            .satisfies(a -> assertThat(a.getChannel()).as("check channel").isEqualTo(expected.getChannel()))
            .satisfies(a -> assertThat(a.getChannelIp()).as("check channelIp").isEqualTo(expected.getChannelIp()))
            .satisfies(a -> assertThat(a.getChannelReference()).as("check channelReference").isEqualTo(expected.getChannelReference()))
            .satisfies(a -> assertThat(a.getChannelTimestamp()).as("check channelTimestamp").isEqualTo(expected.getChannelTimestamp()))
            .satisfies(a -> assertThat(a.getClientId()).as("check clientId").isEqualTo(expected.getClientId()))
            .satisfies(a -> assertThat(a.getCreatedAt()).as("check createdAt").isEqualTo(expected.getCreatedAt()))
            .satisfies(a -> assertThat(a.getDebitAccount()).as("check debitAccount").isEqualTo(expected.getDebitAccount()))
            .satisfies(a -> assertThat(a.getDirection()).as("check direction").isEqualTo(expected.getDirection()))
            .satisfies(a -> assertThat(a.getErrorDescription()).as("check errorDescription").isEqualTo(expected.getErrorDescription()))
            .satisfies(a -> assertThat(a.getGeolocation()).as("check geolocation").isEqualTo(expected.getGeolocation()))
            .satisfies(a -> assertThat(a.getHostCode()).as("check hostCode").isEqualTo(expected.getHostCode()))
            .satisfies(a -> assertThat(a.getPhoneNumber()).as("check phoneNumber").isEqualTo(expected.getPhoneNumber()))
            .satisfies(a -> assertThat(a.getResponseCode()).as("check responseCode").isEqualTo(expected.getResponseCode()))
            .satisfies(a -> assertThat(a.getResponseMessage()).as("check responseMessage").isEqualTo(expected.getResponseMessage()))
            .satisfies(a -> assertThat(a.getTransactionCode()).as("check transactionCode").isEqualTo(expected.getTransactionCode()))
            .satisfies(a -> assertThat(a.getTransactionType()).as("check transactionType").isEqualTo(expected.getTransactionType()))
            .satisfies(a -> assertThat(a.getUserAgent()).as("check userAgent").isEqualTo(expected.getUserAgent()))
            .satisfies(a -> assertThat(a.getUserAgentVersion()).as("check userAgentVersion").isEqualTo(expected.getUserAgentVersion()))
            .satisfies(a -> assertThat(a.getAmount()).as("check amount").isEqualTo(expected.getAmount()))
            .satisfies(a -> assertThat(a.getChargeamount()).as("check chargeamount").isEqualTo(expected.getChargeamount()))
            .satisfies(a -> assertThat(a.getCreditAccount()).as("check creditAccount").isEqualTo(expected.getCreditAccount()))
            .satisfies(a -> assertThat(a.getCbsReference()).as("check cbsReference").isEqualTo(expected.getCbsReference()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMobileAppTransactionsUpdatableRelationshipsEquals(
        MobileAppTransactions expected,
        MobileAppTransactions actual
    ) {
        // empty method
    }
}
